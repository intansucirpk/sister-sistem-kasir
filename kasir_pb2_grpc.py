# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import kasir_pb2 as kasir__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in kasir_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BackendStub(object):
    """Definisi layanan gRPC Backend
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessTransaction = channel.unary_unary(
                '/kasir.Backend/ProcessTransaction',
                request_serializer=kasir__pb2.TransactionRequest.SerializeToString,
                response_deserializer=kasir__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.CheckStock = channel.unary_unary(
                '/kasir.Backend/CheckStock',
                request_serializer=kasir__pb2.StockQuery.SerializeToString,
                response_deserializer=kasir__pb2.StockResponse.FromString,
                _registered_method=True)
        self.UpdateStock = channel.unary_unary(
                '/kasir.Backend/UpdateStock',
                request_serializer=kasir__pb2.StockUpdateRequest.SerializeToString,
                response_deserializer=kasir__pb2.StockUpdateResponse.FromString,
                _registered_method=True)
        self.GetTransactionReport = channel.unary_unary(
                '/kasir.Backend/GetTransactionReport',
                request_serializer=kasir__pb2.TransactionQuery.SerializeToString,
                response_deserializer=kasir__pb2.TransactionReport.FromString,
                _registered_method=True)


class BackendServicer(object):
    """Definisi layanan gRPC Backend
    """

    def ProcessTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactionReport(self, request, context):
        """RPC untuk laporan transaksi
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessTransaction,
                    request_deserializer=kasir__pb2.TransactionRequest.FromString,
                    response_serializer=kasir__pb2.TransactionResponse.SerializeToString,
            ),
            'CheckStock': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckStock,
                    request_deserializer=kasir__pb2.StockQuery.FromString,
                    response_serializer=kasir__pb2.StockResponse.SerializeToString,
            ),
            'UpdateStock': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStock,
                    request_deserializer=kasir__pb2.StockUpdateRequest.FromString,
                    response_serializer=kasir__pb2.StockUpdateResponse.SerializeToString,
            ),
            'GetTransactionReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactionReport,
                    request_deserializer=kasir__pb2.TransactionQuery.FromString,
                    response_serializer=kasir__pb2.TransactionReport.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kasir.Backend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('kasir.Backend', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Backend(object):
    """Definisi layanan gRPC Backend
    """

    @staticmethod
    def ProcessTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kasir.Backend/ProcessTransaction',
            kasir__pb2.TransactionRequest.SerializeToString,
            kasir__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kasir.Backend/CheckStock',
            kasir__pb2.StockQuery.SerializeToString,
            kasir__pb2.StockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kasir.Backend/UpdateStock',
            kasir__pb2.StockUpdateRequest.SerializeToString,
            kasir__pb2.StockUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTransactionReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kasir.Backend/GetTransactionReport',
            kasir__pb2.TransactionQuery.SerializeToString,
            kasir__pb2.TransactionReport.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

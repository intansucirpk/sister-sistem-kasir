# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import sistem_kasir_pb2 as sistem__kasir__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in sistem_kasir_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FrontendStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InputTransaction = channel.unary_unary(
                '/Frontend/InputTransaction',
                request_serializer=sistem__kasir__pb2.Transaction.SerializeToString,
                response_deserializer=sistem__kasir__pb2.Response.FromString,
                _registered_method=True)


class FrontendServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InputTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrontendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InputTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.InputTransaction,
                    request_deserializer=sistem__kasir__pb2.Transaction.FromString,
                    response_serializer=sistem__kasir__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Frontend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Frontend', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Frontend(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InputTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Frontend/InputTransaction',
            sistem__kasir__pb2.Transaction.SerializeToString,
            sistem__kasir__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BackendStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessTransaction = channel.unary_unary(
                '/Backend/ProcessTransaction',
                request_serializer=sistem__kasir__pb2.Transaction.SerializeToString,
                response_deserializer=sistem__kasir__pb2.Response.FromString,
                _registered_method=True)


class BackendServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessTransaction,
                    request_deserializer=sistem__kasir__pb2.Transaction.FromString,
                    response_serializer=sistem__kasir__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Backend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Backend', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Backend(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Backend/ProcessTransaction',
            sistem__kasir__pb2.Transaction.SerializeToString,
            sistem__kasir__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StokBarangStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateStock = channel.unary_unary(
                '/StokBarang/UpdateStock',
                request_serializer=sistem__kasir__pb2.StockRequest.SerializeToString,
                response_deserializer=sistem__kasir__pb2.Response.FromString,
                _registered_method=True)


class StokBarangServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StokBarangServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateStock': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStock,
                    request_deserializer=sistem__kasir__pb2.StockRequest.FromString,
                    response_serializer=sistem__kasir__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StokBarang', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('StokBarang', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StokBarang(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/StokBarang/UpdateStock',
            sistem__kasir__pb2.StockRequest.SerializeToString,
            sistem__kasir__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ReportingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateReport = channel.unary_unary(
                '/Reporting/GenerateReport',
                request_serializer=sistem__kasir__pb2.ReportRequest.SerializeToString,
                response_deserializer=sistem__kasir__pb2.Report.FromString,
                _registered_method=True)


class ReportingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReportingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateReport,
                    request_deserializer=sistem__kasir__pb2.ReportRequest.FromString,
                    response_serializer=sistem__kasir__pb2.Report.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reporting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Reporting', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Reporting(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Reporting/GenerateReport',
            sistem__kasir__pb2.ReportRequest.SerializeToString,
            sistem__kasir__pb2.Report.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
